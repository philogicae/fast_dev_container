name: CI-CD

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: read

jobs:
  lint-bash:
    name: Lint Shell Scripts 🐚
    permissions:
      contents: read
      checks: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Shellcheck
        uses: reviewdog/action-shellcheck@v1
        with:
          pattern: |
            *.sh
            install
            templates/*

  lint-python:
    name: Lint Python Code 🐍
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install ruff mypy
      - name: Run ruff format check
        run: ruff format --check utils.py
      - name: Run ruff linter
        run: ruff check utils.py
      - name: Run mypy type checker
        run: mypy utils.py --strict

  test-dockerfile:
    name: Test Dockerfile Syntax 🐳
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Validate Dockerfile syntax
        run: docker buildx build --check .

  detect-dockerfile-change:
    name: Detect Dockerfile Changes 🔍
    runs-on: ubuntu-latest
    outputs:
      dockerfile_changed: ${{ steps.filter.outputs.dockerfile }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            dockerfile:
              - 'Dockerfile'

  build-image:
    name: Build and Test fdevc:latest 📦
    needs: [lint-bash, lint-python, test-dockerfile, detect-dockerfile-change]
    if: ${{ needs.detect-dockerfile-change.outputs.dockerfile_changed == 'true' || startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Load image for local testing 🛠️
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag fdevc:latest \
            --tag fdevc:build-tag \
            --load \
            --cache-from type=gha,scope=fdevc-build \
            --cache-to type=gha,scope=fdevc-build,mode=max \
            .
      - name: Test image 🧪
        run: |
          docker run --rm fdevc:latest bash -c '
            echo "=== Tool Versions ===" &&
            uv --version &&
            python --version &&
            node --version &&
            deno --version &&
            go version &&
            rustc --version &&
            docker --version &&
            echo "=== All checks passed ==="
          '

  publish-docker:
    name: Publish to Docker Hub 🚀
    if: startsWith(github.ref, 'refs/tags/v') && needs.build-image.result == 'success'
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push image 🚢
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/fdevc:latest
            ${{ vars.DOCKER_USERNAME }}/fdevc:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha,scope=fdevc-build
          cache-to: type=gha,scope=fdevc-build,mode=max
